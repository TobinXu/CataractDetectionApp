(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("scalar", [], factory);
	else if(typeof exports === 'object')
		exports["scalar"] = factory();
	else
		root["scalar"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./src/Resource.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function sendRequest(request, callback) {
  function serialize(data) {
    var formData = new FormData();

    for (var key in data) {
      formData.append(key, data[key]);
    }

    return formData;
  }

  function formatQueryString(data) {
    var queryString = '';

    for (var key in data) {
      queryString += encodeURIComponent(key) + '=' + encodeURIComponent(data[key]) + '&';
    }

    return queryString ? '?' + queryString.substring(0, queryString.length - 1) : queryString;
  }

  function formatURL(url, data) {
    for (var key in data) {
      var variable = '/{' + key + '}';

      if (url.indexOf(variable) !== -1) {
        url = url.replace(variable, '/' + data[key]);
        delete data[key];
      }
    }

    return url.replace(/\/\{(\w+)\}/gi, '');
  }

  var headers = request.headers,
      data = request.data,
      queryString = request.queryString,
      url = request.url;
  var xhr = new XMLHttpRequest();
  data = headers['Content-Type'] === 'application/json' ? JSON.stringify(data) : serialize(data);
  url = formatURL(url, queryString) + formatQueryString(queryString);
  xhr.open(request.method, url, true);

  for (var header in headers) {
    xhr.setRequestHeader(header, headers[header]);
  }

  xhr.send(data);

  xhr.onreadystatechange = function () {
    if (xhr.readyState === 4) {
      var content = xhr.getResponseHeader('Content-Type');
      var responseURL = xhr.responseURL;
      var response = xhr.responseText;

      if (content) {
        if (content.indexOf('application/json') !== -1) {
          response = JSON.parse(response);
        } else if (/(application|text)\/xml/.test(content)) {
          response = xhr.responseXML;
        }
      }

      callback({
        response: response,
        url: responseURL,
        status: xhr.status,
        redirect: request.redirect && responseURL !== url
      });
    }
  };
}

function solve(xhr, resolve, reject) {
  var status = xhr.status,
      response = xhr.response;

  if (xhr.redirect) {
    return window.location = xhr.url;
  }

  status > 399 ? reject(response, status) : resolve(response, status);
}

function manage(resource, method, data, queryString) {
  resource.method = method;
  resource.data = data;
  resource.queryString = queryString;
  return new Promise(function (resolve, reject) {
    if (Worker) {
      var blob = new Blob(['self.onmessage=function(e){(' + sendRequest + ')(e.data,self.postMessage)}']);
      var worker = new Worker(window.URL.createObjectURL(blob));
      worker.postMessage(resource);

      worker.onmessage = function (e) {
        return solve(e.data, resolve, reject);
      };
    } else {
      sendRequest(resource, function (res) {
        return solve(res, resolve, reject);
      });
    }
  });
}

var Resource =
/*#__PURE__*/
function () {
  function Resource(url) {
    _classCallCheck(this, Resource);

    this.url = url;
    this.redirect = true;
    this.headers = {
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    };
  }

  _createClass(Resource, [{
    key: "get",
    value: function get(queryString) {
      return manage(this, 'GET', null, queryString);
    }
  }, {
    key: "post",
    value: function post(dataBody, queryString) {
      return manage(this, 'POST', dataBody, queryString);
    }
  }, {
    key: "put",
    value: function put(dataBody, queryString) {
      return manage(this, 'PUT', dataBody, queryString);
    }
  }, {
    key: "delete",
    value: function _delete(queryString) {
      return manage(this, 'DELETE', null, queryString);
    }
  }, {
    key: "request",
    value: function request(method) {
      var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return manage(this, method, opt.dataBody, opt.queryString);
    }
  }]);

  return Resource;
}();


// CONCATENATED MODULE: ./src/util/stdlib.js
var hasObjectConfig = false;
document.createElement('b').addEventListener('load', null, Object.defineProperty({}, 'passive', {
  get: function get() {
    hasObjectConfig = true;
  }
}));

function bindFunction(name, $element, fn) {
  var lastChar = name.length - 1;
  var capture = false;
  var passive = true;

  if (name.indexOf('_') === 0) {
    var method = fn;

    fn = function fn(e) {
      return method.call($element, e) !== true && e.preventDefault();
    };

    fn.uuid = method.uuid;
    passive = false;
    name = name.substring(1);
  }

  if (name.lastIndexOf('_') === lastChar) {
    capture = true;
    name = name.substring(0, lastChar);
  }

  var opt = hasObjectConfig ? {
    passive: passive,
    capture: capture
  } : capture;
  $element.addEventListener(name, fn, opt);
  $element.eventListenerList.push({
    name: name,
    fn: fn,
    opt: opt
  });
}

function getObject(obj, props, value) {
  var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var prop = obj[props[i]];
  obj[props[i]] = ++i < props.length ? getObject(prop || {}, props, value, i) : value;
  return obj;
}

function addListeners($element, events) {
  var root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  var _loop = function _loop(selector) {
    var fn = events[selector];

    if (root && typeof fn === 'function') {
      if (!$element.eventListenerList) {
        $element.eventListenerList = [];
      }

      if (fn.uuid) {
        var search = $element.eventListenerList.find(function (listener) {
          return listener.fn.uuid === fn.uuid;
        });

        if (!search) {
          bindFunction(selector, $element, fn);
        }
      } else {
        generateUUID(fn);
        bindFunction(selector, $element, fn);
      }
    }

    var $nodeList = $element.querySelectorAll(selector);

    for (var i = 0, $node; $node = $nodeList[i]; i++) {
      addListeners($node, fn);
    }
  };

  for (var selector in events) {
    _loop(selector);
  }
}
function clone(object) {
  var gdcc = '_deep_';
  if (object !== Object(object)) return object;
  var set = gdcc in object;
  var cache = object[gdcc];
  var result;
  if (set && typeof cache == 'function') return cache();

  object[gdcc] = function () {
    return result;
  };

  if (object instanceof Array) {
    result = object.map(function (obj) {
      return clone(obj);
    });
  } else {
    result = {};

    for (var prop in object) {
      result[prop] = prop != gdcc ? clone(object[prop]) : clone(cache);
    }
  }

  if (set) {
    object[gdcc] = cache;
  } else {
    delete object[gdcc];
  }

  return result;
}
function generateUUID(obj) {
  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0;
    var v = c == 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
  Object.defineProperty(obj, 'uuid', {
    value: uuid,
    configurable: false,
    writable: false
  });
  return uuid;
}
function setPropertyValue(property, prop, value) {
  property.value = prop.length ? getObject(property.value || {}, prop, value) : value;
}
// CONCATENATED MODULE: ./src/util/Wrapper.js

var correlation = {};
function Wrapper_set(obj, props) {
  var uuid = obj.uuid;

  if (!uuid) {
    uuid = generateUUID(obj);
  }

  correlation[uuid] = props;
  return uuid;
}
function Wrapper_get(obj) {
  var uuid = obj.uuid;

  if (!uuid) {
    uuid = Wrapper_set(obj, {});
  }

  return correlation[uuid];
}
// CONCATENATED MODULE: ./src/observable/Attribute.js


function setAttribute($attribute, name, property) {
  if (property.constructor === Object) {
    for (var k in property) {
      setAttribute($attribute[name], k, property[k]);
    }
  } else if ($attribute[name] !== property) {
    $attribute[name] = property;
  }
}

function create(property, name, $element, prop, exp) {
  var keys = name.split('.');
  var $attribute = $element;
  name = keys.pop();
  keys.forEach(function (k) {
    $attribute = $attribute[k];
  });
  var attribute = {
    name: name,
    $attribute: $attribute,
    $element: $element,
    prop: prop,
    exp: exp
  };
  exp ? execute(property, attribute) : setPropertyValue(property, prop, $attribute[name]);
  return attribute;
}
function execute(property, attribute, value) {
  var $element = attribute.$element;
  var eventListenerList = $element.eventListenerList;
  var parent = property.parent;

  if (attribute.exp) {
    value = Function('p', 'return ' + attribute.exp)(property.component);
  } else {
    attribute.prop.forEach(function (prop) {
      value = value[prop];
    });
  }

  setAttribute(attribute.$attribute, attribute.name, value);

  if (eventListenerList) {
    while (eventListenerList.length) {
      var listener = eventListenerList.shift();
      $element.removeEventListener(listener.name, listener.fn, listener.opt);
    }
  }

  addListeners(parent.$node, parent.events);
}
// CONCATENATED MODULE: ./src/view/DOM.js
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function updateProps($target, newProps, oldProps) {
  for (var i = 0, newProp; newProp = newProps[i]; i++) {
    $target.setAttribute(newProp.name, newProp.value);
  }

  for (var _i = 0, oldProp; oldProp = oldProps[_i]; _i++) {
    if (!newProps[oldProp.name]) {
      $target.removeAttribute(oldProp.name);
    }
  }
}

function changed($node1, $node2) {
  return $node1.nodeType !== $node2.nodeType || $node1.nodeType === 3 && $node1.textContent !== $node2.textContent || $node1.tagName !== $node2.tagName;
}

function updateElement($parent, $newNode, $oldNode) {
  var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

  if (!$oldNode) {
    $parent.appendChild($newNode);
  } else if (!$newNode) {
    $parent.removeChild($oldNode);
  } else {
    if (changed($newNode, $oldNode)) {
      $parent.replaceChild($newNode, $oldNode);
    } else if ($newNode.nodeType !== 3) {
      updateProps($parent.childNodes[index], $newNode.attributes, $oldNode.attributes);
      updateNodes($parent.childNodes[index], $newNode.childNodes, $oldNode.childNodes);
    }
  }
}

function updateNodes($parent, newNodes) {
  var oldNodes = _toConsumableArray($parent.childNodes);

  newNodes = _toConsumableArray(newNodes);

  for (var i = 0; i < newNodes.length || i < oldNodes.length; i++) {
    updateElement($parent, newNodes[i], oldNodes[i], i);
  }
}
// CONCATENATED MODULE: ./src/view/Template.js


var cache = {};
function Template_create(component, $node, $template) {
  var regex = /\/?\s*>\s+<\s*/g;
  return {
    component: component,
    $node: $node,
    tpl: $template.innerHTML.trim().replace(regex, '> <'),
    base: $node.innerHTML.trim().replace($template.outerHTML, '').replace(regex, '> <')
  };
}
function getValue(template) {
  var value = [];
  var keys = template.tpl.match(/\$\{data\.[\w\d\.]*\}/g);
  if (!keys) return value;
  keys = keys.map(function (data) {
    return data.replace('${data.', '').replace('}', '');
  });
  var regex = new RegExp(template.tpl.replace(/[.*+?^${}()|[\]\\]/g, '\\$&').replace(/\\\$\\\{data\\\.[\w\d\.]*\\\}/g, '(.*?)').replace(/\\\$\\\{[^\}]*\\\}/g, '.*?'), 'g');
  var matches;

  var _loop = function _loop() {
    var obj = {};
    keys.forEach(function (key, i) {
      obj[key] = matches[i + 1];
    });
    value.push(obj);
  };

  while ((matches = regex.exec(template.base)) !== null) {
    _loop();
  }

  return value;
}
function render(_ref, param) {
  var $node = _ref.$node,
      tpl = _ref.tpl,
      component = _ref.component;
  var fn = cache[tpl];

  if (!fn) {
    fn = cache[tpl] = Function('data,index', 'return `' + tpl + '`');
  }

  var fragment = document.createElement('template');
  fragment.innerHTML = Array.isArray(param) ? param.map(fn).join('') : fn(param);
  updateNodes($node, fragment.content.childNodes);
  $node.dispatchEvent(new Event('mutate'));
  addListeners($node, component.events, false);
}
// CONCATENATED MODULE: ./src/observable/Node.js




function isInput($node) {
  var nodeName = $node.nodeName;
  return nodeName === 'INPUT' || nodeName === 'TEXTAREA' || nodeName === 'SELECT';
}

function setValue($node, value) {
  var attr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'value';
  var type = $node.type;

  if (type === 'checkbox' || type === 'radio') {
    attr = 'checked';

    if (type === 'radio') {
      value = $node.value === value;
    }
  } else if (type === 'file') {
    attr = 'files';
  }

  if ($node[attr] !== value) {
    $node[attr] = value;
    $node.dispatchEvent(new Event('mutate'));
  }
}

function evalValue(target) {
  if (target.type === 'radio') {
    return target.checked ? target.value : null;
  }

  if (target.type === 'file' && target.files) {
    return target.files;
  }

  if (target.type === 'checkbox') {
    return target.checked;
  }

  return target.value || null;
}

function changeContent(property, prop, value) {
  var state = clone(property.value);
  setPropertyValue(property, prop, value);
  value = property.value;
  property.nodes.forEach(function (node) {
    Node_execute(node, state, value);
  });
  property.attributes.forEach(function (attr) {
    execute(property, attr, value);
  });
}

function getObjectValue(obj, props) {
  for (var i = 0, prop; prop = props[i]; i++) {
    if (!obj[prop]) return '';
    obj = obj[prop];
  }

  return obj;
}

function Node_create(property, $node, prop) {
  var value = property.value;
  var complexType = null;

  if (value instanceof Object) {
    value = getObjectValue(value, prop);
  }

  if (isInput($node)) {
    var inputValue = evalValue($node);
    $node.addEventListener('keyup', function (e) {
      return changeContent(property, prop, e.target.value);
    });
    $node.addEventListener('change', function (e) {
      return changeContent(property, prop, evalValue(e.target));
    });

    if (inputValue === null) {
      setValue($node, value);
    } else {
      value = inputValue;
    }
  } else if ($node.tagName === 'SCRIPT' && $node.type === 'text/template') {
    complexType = Template_create(property.parent, $node.parentNode, $node);
    value = getValue(complexType);
  } else if ($node.innerHTML) {
    var $template = $node.querySelector('script[type="text/template"]');
    value = $node.innerHTML;

    if ($template) {
      complexType = Template_create(property.parent, $node, $template);
      value = getValue(complexType);
    }
  } else {
    setValue($node, value, 'innerHTML');
  }

  setPropertyValue(property, prop, value);
  return {
    prop: prop,
    $node: $node,
    complexType: complexType
  };
}
function Node_execute(node, state, value) {
  var $node = node.$node,
      complexType = node.complexType;
  var attr = isInput($node) ? 'value' : 'innerHTML';
  node.prop.forEach(function (prop) {
    value = value[prop];
    state = state[prop];
  });

  if (value !== state) {
    complexType && value ? render(complexType, value) : setValue($node, value, attr);
  }
}
// CONCATENATED MODULE: ./src/observable/Property.js





var getFunctionHandler = function getFunctionHandler(property, root) {
  return {
    apply: function apply(target, thisArg, argumentsList) {
      var res = Reflect.apply(target, thisArg, argumentsList);

      _set(property, root);

      return res;
    }
  };
};

var Property_getPropertyHandler = function getPropertyHandler(property, root) {
  return {
    set: function set(target, prop, value) {
      root = root || target;
      var state = clone(root);

      if (value instanceof Promise) {
        return value.then(function (data) {
          if (Reflect.set(target, prop, data)) return _set(property, root, state);
        });
      }

      if (Reflect.set(target, prop, value)) {
        return _set(property, root, state);
      }
    },
    get: function get(target, prop, receiver) {
      var value = Reflect.get(target, prop, receiver);

      if (value) {
        var _constructor = value.constructor;
        root = root || target;

        if (_constructor === Function) {
          return new Proxy(value.bind(target), getFunctionHandler(property, root));
        }

        if (_constructor === Object || _constructor === Array) {
          return new Proxy(value, getPropertyHandler(property, root));
        }
      }

      return value;
    }
  };
};

function Property_changeContent(property, value, state) {
  property.value = value;
  property.nodes.forEach(function (node) {
    Node_execute(node, state, value);
  });
  property.attributes.forEach(function (attr) {
    execute(property, attr, value);
  });
  return true;
}

function addOverloap(component, property, name) {
  component = Wrapper_get(component);
  var prop = component.properties[name];
  var events = Object.assign({}, property.parent.events);
  prop.over.push(property);
  property.over.push(prop);

  for (var _name in events) {
    if (events[_name] instanceof Function) {
      delete events[_name];
    }
  }

  Object.assign(component.events, events);
}

function findComponent($node, components, property, name) {
  if ($node.parentNode) {
    var parentNode = $node.parentNode;

    if (parentNode.dataset && parentNode.dataset.component) {
      var uuid = parentNode.dataset.component;

      if (components[uuid][name]) {
        addOverloap(components[uuid], property, name);
      }
    }

    findComponent($node.parentNode, components, property, name);
  }
}

function Property_create(component, name) {
  var parent = Wrapper_get(component);
  var property = {
    component: component,
    parent: parent,
    value: '',
    nodes: [],
    attributes: [],
    over: []
  };
  findComponent(parent.$node, parent.module.components, property, name);
  return property;
}
function Property_get(property) {
  var value = property.value;

  if (value instanceof Object) {
    if (property.observable !== value) {
      property.proxy = new Proxy(value, Property_getPropertyHandler(property));
      property.observable = value;
    }

    return property.proxy;
  }

  return value;
}

function _set(property) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var state = arguments.length > 2 ? arguments[2] : undefined;
  property.over.forEach(function (prop) {
    prop.value = value;
  });
  return value instanceof Promise ? value.then(function (data) {
    return Property_changeContent(property, data, state);
  }) : Property_changeContent(property, value, state);
}


function addNode(property, $node, prop) {
  property.nodes.push(Node_create(property, $node, prop));
}
function addAttribute(property, name, $element, prop, exp) {
  property.attributes.push(create(property, name, $element, prop, exp));
}
// CONCATENATED MODULE: ./src/observable/Component.js
function Component_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Component_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function Component_createClass(Constructor, protoProps, staticProps) { if (protoProps) Component_defineProperties(Constructor.prototype, protoProps); if (staticProps) Component_defineProperties(Constructor, staticProps); return Constructor; }





function getProperty(component, name) {
  var prop = Property_create(component, name);
  Object.defineProperty(component, name, {
    get: function get() {
      return Property_get(prop);
    },
    set: function set(value) {
      return _set(prop, value, Object.assign({}, prop.value));
    }
  });
  return prop;
}

function bindData(component, $domElement) {
  var name = $domElement.dataset.bind;
  var properties = Wrapper_get(component).properties;
  var propertyObj = name.split('.');
  name = propertyObj.shift();

  if (!properties[name]) {
    properties[name] = getProperty(component, name);
  }

  addNode(properties[name], $domElement, propertyObj);
}

function bindAttributes(component, $domElement) {
  $domElement.dataset.attr.split(';').forEach(function (attribute) {
    var index = attribute.indexOf(':');
    var properties = [];
    var exp = attribute.substr(index + 1).trim();
    exp.replace(/'[^']*'/g, '').match(/\w[\w\._]+/g).forEach(function (prop) {
      var props = prop.split('.');
      var name = props.shift();
      var privy = Wrapper_get(component).properties;

      if (!privy[name]) {
        privy[name] = getProperty(component, name);
      }

      exp = exp !== prop ? exp.replace(prop, 'p.' + prop) : null;
      properties.push({
        props: props,
        value: privy[name]
      });
    });
    properties.forEach(function (prop) {
      addAttribute(prop.value, attribute.substr(0, index).trim(), $domElement, prop.props, exp);
    });
  });
}

function watch(component, $node) {
  var dataBinds = Array.from($node.querySelectorAll('[data-bind]'));
  var dataAttributes = Array.from($node.querySelectorAll('[data-attr]'));

  if ($node.dataset.bind) {
    dataBinds.push($node);
  }

  if ($node.dataset.attr) {
    dataAttributes.push($node);
  }

  dataBinds.forEach(function ($bind) {
    bindData(component, $bind);
  });
  dataAttributes.forEach(function ($attr) {
    bindAttributes(component, $attr);
  });
}

function _compose($node, behavioral, module) {
  var props = {
    $node: $node,
    module: module,
    properties: {}
  };
  var behavioralIsComponent = behavioral.prototype instanceof Component_Component;
  var component = behavioralIsComponent ? new behavioral() : new Component_Component();
  Wrapper_set(component, props);
  props.events = behavioralIsComponent ? component.listen && component.listen() : behavioral(component);
  watch(component, $node);
  addListeners($node, props.events);
  $node.dispatchEvent(new Event('mount'));
  return component;
}



var Component_Component =
/*#__PURE__*/
function () {
  function Component() {
    Component_classCallCheck(this, Component);
  }

  Component_createClass(Component, [{
    key: "inject",
    value: function inject(provider) {
      return Wrapper_get(this).module.inject(provider);
    }
  }, {
    key: "compose",
    value: function compose($domElement, behavioral) {
      return _compose($domElement, behavioral, Wrapper_get(this).module);
    }
  }, {
    key: "getIndex",
    value: function getIndex(e) {
      var _Privy$get = Wrapper_get(this),
          $node = _Privy$get.$node;

      var parent = e.target;

      do {
        var key = parent.dataset.key;
        if (key) return key;
        parent = parent.parentNode;
      } while (parent !== $node);
    }
  }]);

  return Component;
}();


// CONCATENATED MODULE: ./src/Module.js
function Module_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Module_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function Module_createClass(Constructor, protoProps, staticProps) { if (protoProps) Module_defineProperties(Constructor.prototype, protoProps); if (staticProps) Module_defineProperties(Constructor, staticProps); return Constructor; }





var Module_Module =
/*#__PURE__*/
function () {
  function Module() {
    Module_classCallCheck(this, Module);

    var properties = {
      classes: {},
      instances: {},
      components: {},
      inject: function inject(provider) {
        var classes = properties.classes,
            instances = properties.instances;
        var _provider = provider,
            uuid = _provider.uuid;

        if (classes[uuid]) {
          provider = new classes[uuid](properties.inject);
          provider.uuid = uuid;
          instances[uuid] = provider;
          delete classes[uuid];
        }

        ;
        return instances[uuid];
      }
    };
    Wrapper_set(this, properties);

    for (var _len = arguments.length, providers = new Array(_len), _key = 0; _key < _len; _key++) {
      providers[_key] = arguments[_key];
    }

    providers.forEach(function (provider) {
      if (!provider.uuid) {
        properties.classes[generateUUID(provider)] = provider;
      }
    });
  }

  Module_createClass(Module, [{
    key: "compose",
    value: function compose(selector, behavioral) {
      var $nodes = document.querySelectorAll(selector);

      for (var i = 0, $node; $node = $nodes[i]; i++) {
        var component = _compose($node, behavioral, Wrapper_get(this));

        Wrapper_get(this).components[component.uuid] = component;
        $node.dataset.component = component.uuid;
      }

      return this;
    }
  }]);

  return Module;
}();


// CONCATENATED MODULE: ./scalar.js
/* concated harmony reexport Resource */__webpack_require__.d(__webpack_exports__, "Resource", function() { return Resource; });
/* concated harmony reexport Module */__webpack_require__.d(__webpack_exports__, "Module", function() { return Module_Module; });
/* concated harmony reexport Component */__webpack_require__.d(__webpack_exports__, "Component", function() { return Component_Component; });





/***/ }),
/* 1 */,
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./app/styles/theme.css
var theme = __webpack_require__(2);

// EXTERNAL MODULE: ./scalar.js + 10 modules
var scalar = __webpack_require__(0);

// CONCATENATED MODULE: ./app/services/Message.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Message =
/*#__PURE__*/
function () {
  function Message() {
    _classCallCheck(this, Message);
  }

  _createClass(Message, [{
    key: "set",
    value: function set(msg) {
      this.my.msg = msg;
    }
  }]);

  return Message;
}();


// CONCATENATED MODULE: ./app/components/Form.js

var initState = ['Hello', 'Hi', 'OK'];

function getEmptyFileList() {
  var $file = document.createElement('input');
  $file.type = 'file';
  return $file.files;
}

/* harmony default export */ var Form = (function ($) {
  return {
    mount: function mount() {
      $.dependency = initState;
      $.select2 = initState[0];
    },
    _submit: function _submit() {
      $.inject(Message).set($.name);
      console.log($);
    },
    reset: function reset() {
      return Object.assign($, {
        name: 'init',
        password: '',
        sexo: 'F',
        paint: true,
        select: 'h',
        file: getEmptyFileList()
      });
    },
    '.fill': {
      click: function click() {
        return Object.assign($, {
          name: 'Marlon Ramírez',
          password: 'MySecretPassword',
          sexo: 'M',
          paint: false,
          select: 'm'
        });
      }
    },
    '#select': {
      change: function change() {
        $.dependency = $.select === 'm' ? ['World'] : initState;
        $.select2 = $.dependency[0];
      }
    },
    'datalist[data-bind]': {
      mutate: function mutate(e) {
        var target = e.target;
        var selects = document.querySelectorAll('select[list="' + target.id + '"]');

        for (var i = 0, select; select = selects[i]; i++) {
          select.innerHTML = target.innerHTML;
        }
      }
    }
  };
});
// CONCATENATED MODULE: ./app/components/Test.js


var _window$location = window.location,
    protocol = _window$location.protocol,
    hostname = _window$location.hostname,
    port = _window$location.port;
var user = new scalar["Resource"](protocol + '//' + hostname + ':' + port + '/response.json');
/* harmony default export */ var Test = (function ($) {
  var message = $.inject(Message);

  function track(e) {
    console.log($, e.clientX + ',' + e.clientY);
  }

  function sendRequest() {
    $.action.replace('open', 'reset');
    $.name = user.get();
  }

  function reset() {
    $.action.replace('reset', 'open');
    Object.assign($, {
      name: [],
      squareStyle: {
        backgroundColor: 'black',
        borderRadius: 0
      }
    });
  }

  function paint() {
    var color = this.innerText.toLowerCase();
    $.squareStyle = {
      backgroundColor: color,
      borderRadius: color !== 'blue' ? '.5em' : '0'
    };
  }

  return {
    mount: function mount() {
      return message.my = $.my;
    },
    mousemove: track,
    '.open': {
      click: sendRequest
    },
    '.paint': {
      click: paint
    },
    '.reset': {
      click: function click() {
        return reset();
      }
    }
  };
});
// CONCATENATED MODULE: ./app/components/ToDo.js
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ToDo_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function ToDo_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function ToDo_createClass(Constructor, protoProps, staticProps) { if (protoProps) ToDo_defineProperties(Constructor.prototype, protoProps); if (staticProps) ToDo_defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



var ToDo =
/*#__PURE__*/
function (_Component) {
  _inherits(ToDo, _Component);

  function ToDo() {
    ToDo_classCallCheck(this, ToDo);

    return _possibleConstructorReturn(this, _getPrototypeOf(ToDo).apply(this, arguments));
  }

  ToDo_createClass(ToDo, [{
    key: "listen",
    value: function listen() {
      var _this = this;

      return {
        mount: function mount() {
          return console.log(_this);
        },
        _submit: function _submit(e) {
          return _this.add(e);
        },
        '.close': {
          _click: function _click(e) {
            return _this.remove(e);
          }
        },
        '.check': {
          _click: function _click(e) {
            return _this.crossOutItem(e);
          }
        },
        '#clean': {
          click: function click() {
            return _this.tasks = [];
          }
        }
      };
    }
  }, {
    key: "remove",
    value: function remove(e) {
      var index = this.getIndex(e);
      this.tasks.splice(index, 1);
    }
  }, {
    key: "add",
    value: function add() {
      if (!this.task) return;
      this.tasks.push({
        content: this.task,
        checked: ''
      });
      this.task = '';
    }
  }, {
    key: "crossOutItem",
    value: function crossOutItem(e) {
      var index = this.getIndex(e);
      var task = this.tasks[index];
      task.checked = task.checked ? '' : 'checked';
    }
  }]);

  return ToDo;
}(scalar["Component"]);


// CONCATENATED MODULE: ./app/app.js






new scalar["Module"](Message).compose('#square', Test).compose('#hello-world', Form).compose('#todo', ToDo).compose('.alert', function () {
  return {
    '.show': {
      click: function click(e) {
        return alert(e.target.innerText);
      }
    }
  };
});

/***/ })
/******/ ]);
});